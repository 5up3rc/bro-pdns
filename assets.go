// Code generated by go-bindata.
// sources:
// assets/app.js
// assets/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x4d\x6f\xdc\x36\x10\xbd\xeb\x57\xd0\x42\x0a\x4b\x80\x21\xc5\x39\xc6\xd2\x02\xad\x9d\x00\x41\x9d\xd6\xb5\x17\xcd\x35\xb4\x38\x5e\xb1\xe6\x92\x0a\x49\xad\xbd\x10\xf4\xdf\x0b\x52\xd2\x8a\xfa\x58\xa5\x45\x9c\xa2\x88\x2f\xc9\x0e\x1f\xe7\xe3\xf1\xcd\x8c\x76\x58\xa2\x0f\x9c\xd0\x1d\x25\x25\x66\xb7\xa0\x4a\xa6\x15\x4a\xd1\x43\xc9\x33\x4d\x05\x0f\x2a\xd9\xd8\xea\x10\x55\x1e\x42\x08\x65\x82\x2b\x8d\xa8\x86\xad\xc1\xb5\xa7\xd1\x16\x17\x41\x20\xc5\x53\x88\xd2\x95\x85\x99\xbf\x44\xcb\xfe\x47\x63\x20\xab\x4a\x8a\xa7\xe8\x4f\xcc\x4a\xa8\x93\x58\x93\x23\x80\x4f\x39\xcd\xf2\x25\xc0\xa5\x28\xb9\x5e\x02\xbc\xa7\x52\x2d\x02\xae\xf1\xe4\x3c\x89\xbb\x8c\xc3\x0b\xfb\x8f\x04\x5d\x4a\x8e\x02\xa7\x24\x7c\xcf\x00\x3d\x51\xa2\xf3\xd4\x3f\x7f\xfd\xfa\x27\x7f\xec\x3e\x07\x3c\x0a\x39\xcb\x85\x73\x61\x65\xe9\x48\x62\x9d\x1f\x87\x58\x42\x96\x21\x96\x92\x65\x88\x25\x65\x19\x62\x68\x99\x47\xf4\xec\x38\x96\x69\xb5\x89\xbe\x17\x64\x3f\xbd\x5e\x59\xcd\xd4\x63\x07\x43\x70\x12\x5b\x82\xdb\x47\xf0\x6a\xcf\x08\x74\x5d\x16\x0c\xfe\x33\x6d\xfe\x51\x82\xdc\x2f\x09\x67\xbd\x2f\x16\xb5\xfb\x33\x57\x4f\x20\xbf\x49\xbc\xeb\xf5\xf5\xff\x42\xdb\xe8\x5e\x48\x02\x32\xf5\xcf\x5f\x42\xe6\x96\xd9\x65\xf5\x19\x6e\x97\x11\x0d\xbb\xdf\xdc\x09\xeb\xf5\xf5\x8f\xd6\x2a\x5e\xc6\xb0\x52\xe8\x0e\xb0\xcc\x72\x90\x08\x9e\x35\x70\xa2\xd0\x2d\xe0\x4c\x47\x97\x62\x5b\x08\x0e\x5c\xbb\xbd\x22\xcb\x4c\x0b\x19\x14\x52\x14\xaa\x6b\x22\xf3\xa7\xca\x02\x3a\xf3\xc5\xc1\xaa\x73\xaa\x22\xa5\xb1\x06\x94\xa2\x6a\xab\x36\x6f\x91\xef\x9f\x75\x7d\xf6\x16\xf1\x92\xb1\xba\x81\xd7\x5e\x1b\xa4\x0d\xfa\x89\x32\x76\x0b\x19\xd0\x1d\xdc\x18\xaf\x01\x87\x67\x7d\x33\x0e\x4b\x1f\x7a\x7b\xf4\xc5\xa8\x05\x9d\xa4\x69\x13\xb7\xe8\x8d\xe1\x80\x18\x7b\x4a\x44\x53\xf6\xf8\x7e\xd8\x66\x33\x48\xe6\x8a\x92\x8f\x46\x21\x81\x1b\x7b\xe8\x66\x3e\x64\x5b\xd5\x01\xd5\x1c\x0d\x0b\x38\x99\x49\xb1\x69\xb5\x0b\x6f\xc4\x24\xe8\x3b\x43\x66\xd0\x52\xd9\x38\xa5\x7c\x13\x45\x91\x5f\x3b\xbc\x3f\x80\xce\xf2\xe0\x73\x4c\xb8\x8a\x19\x7d\x84\xf8\x55\xe5\xe4\xf7\x48\x39\xa9\xe3\x57\x95\x8d\x5b\x7f\x0e\x23\x9d\x03\x0f\x02\x09\xaa\x30\x13\xcf\xc9\xae\x4f\xc5\xbc\x59\x11\xfd\xa5\x04\x0f\x9c\x38\x75\x77\x97\x60\x8d\x67\xee\x1a\xc9\x08\x06\x11\x13\x1b\x0b\x89\x18\xf0\x8d\xce\xcf\x90\x2f\x21\x13\x92\x28\xdf\x71\x76\xb4\x4c\x57\x31\xc6\x4b\x3d\xc8\x60\x20\x1f\x09\x9c\x80\x0c\xc6\x0c\x4f\x1e\x67\xbe\xc6\xc0\xe8\xd1\x75\xee\x3a\xe9\xb5\x1c\xc9\x6e\xb3\xa4\xa9\x95\xf0\x11\x77\x09\xa1\xbb\x55\xe5\xdc\xdb\xaa\x4d\x9d\xc4\xc6\xba\x14\xa3\x7f\x24\x1b\xc0\xd7\x66\x99\x29\x3f\x44\xb3\x29\x4f\x27\x89\xf1\x3f\x3f\x81\xf2\x37\x2b\xbb\x19\x55\x12\xe7\x6f\x8e\x60\x06\xab\xb3\x2d\x34\xad\xa6\xc5\xd7\xf1\xdc\x10\x9b\xc4\xee\x65\x0d\x4c\xc1\x8b\x94\xd0\x7f\x7d\x2e\x94\x31\xfd\x44\x7d\xa9\x5a\xea\xf1\xe0\x7c\x2f\xe4\xf6\x3b\x8d\xce\x1c\x73\xc2\xe0\x57\xd8\xdf\x48\x50\xe6\x0b\x65\xc6\x1a\xdd\x53\x4e\xac\x72\x86\xad\x30\x44\x05\x30\xec\x09\x14\x40\xf4\x08\x7b\xab\xb0\xd3\x77\x5c\x83\x3c\x1d\xab\xd8\x11\xa3\xe0\x16\x12\x84\x23\xd9\x1e\xef\xba\xd9\xb7\x4d\x18\xbe\x07\xd6\x6c\xf5\x29\xe1\x94\x17\xa5\x46\x7a\x5f\x40\xea\x6b\x78\xd6\x3e\xe2\x78\x0b\xa9\xff\xc5\x47\x3b\xf3\xb9\x9b\x56\xe3\x36\xae\x91\xe0\x97\x39\xe6\x9b\xe1\x59\x67\x34\xc7\x5d\xfd\x2d\x60\x48\xca\xf8\xdd\x93\xb8\x49\xd0\xfb\xca\x8b\xf7\xcf\xfb\x9d\x37\xa6\xad\xb2\x99\x80\x38\xd3\x74\x07\xad\xc1\xd9\x9b\x87\x4b\xf6\xa8\x29\x9c\x74\x4a\x71\x6d\x13\x9d\x1c\x6e\xca\x92\xdb\x27\xe9\x6e\x75\xbf\x8f\x29\xcb\xf5\x1a\xc0\x0e\xb8\x9e\xac\xc5\x7e\x84\xb7\x19\x5b\x58\xa4\xb1\xdc\x80\x8e\xec\x73\xf6\x93\xdb\xea\xa5\x8d\x39\xdd\xb0\xbd\xab\x01\x05\x4e\x17\x37\x5a\xf8\xea\x22\x98\x97\xe4\xec\xa8\x49\xf2\xf3\xd5\xcd\xd5\x6f\x77\x27\x49\x9c\x9f\xcf\x1c\x3b\x8d\x6f\x83\x0f\x86\xca\xbc\x34\x5d\xd2\xcc\xa1\x6d\xa8\xf6\xac\x2b\x7e\x76\x0e\x1d\xbe\xce\xcc\x46\x48\x7d\x7a\x18\x6c\xfe\x4c\x6c\x87\xa2\x7f\xe2\xac\x5d\x2d\xff\xce\xd1\x68\x32\x1e\x78\xaf\x2f\x3c\xcf\xf6\xc1\xd5\xef\x1f\xa3\x96\xff\x64\xdc\x30\xf1\xea\x0c\x11\x91\x95\x5b\x23\x87\x0d\xe8\x77\x0c\xcc\x7f\x7f\xd9\x7f\x20\xc1\x29\x2e\x8a\xd3\x30\xbc\xf0\xfe\x0e\x00\x00\xff\xff\x85\x22\xa8\xe2\x64\x10\x00\x00")

func appJsBytes() ([]byte, error) {
	return bindataRead(
		_appJs,
		"app.js",
	)
}

func appJs() (*asset, error) {
	bytes, err := appJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.js", size: 4196, mode: os.FileMode(420), modTime: time.Unix(1501642628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xb1\x6e\xf3\x30\x0c\x84\x77\x3f\x85\x7e\xed\x16\x91\x3f\x08\x10\x14\xb2\x97\xa6\x1d\xdb\x00\x4d\x87\x8e\xb4\xc4\xd6\x32\x24\x4b\x90\x98\x34\x79\xfb\xc2\x90\xa7\x0e\x9d\x32\x49\xe4\xf1\xbe\x03\x48\xfd\xef\xf0\xfa\x78\xfa\x38\x3e\x89\x91\x83\xef\x1b\xbd\x3c\xc2\xe3\xfc\xd5\x49\x9a\xe5\xd2\x20\xb4\x7d\x23\x84\x10\x3a\x10\xa3\x30\x23\xe6\x42\xdc\xc9\xf7\xd3\x73\xbb\x97\xab\xc4\x8e\x3d\xf5\xc7\xc3\xcb\x9b\x86\xfa\x6f\x34\x54\xab\x1e\xa2\xbd\xad\x63\xd6\x5d\x84\xb3\x9d\xc4\x94\x64\xaf\xc1\xba\xcb\x2a\x14\x93\x5d\x62\x51\xb2\xe9\xe4\xc8\x9c\xca\x03\x80\xb1\xf3\x54\x94\xf1\xf1\x6c\x3f\x3d\x66\x52\x26\x06\xc0\x09\xaf\xe0\xdd\x50\x20\x13\x1a\x86\xcd\x4e\x6d\xd5\xa6\x16\x6a\x2a\x0b\xb5\xb2\xee\x09\x6e\x6d\x0c\x77\x82\x0f\x38\x90\x6f\x4d\xcc\x04\x3b\xb5\x57\xff\xb7\x30\xe4\xf8\x5d\x28\xab\xe0\xe6\x3f\x32\xf8\x96\xa8\x93\x4c\x57\xae\x08\x59\x53\xe1\xec\x00\x53\xfa\x65\xd4\x50\x77\xae\xa1\x5e\xf5\x27\x00\x00\xff\xff\xb0\x6e\x18\x3e\xe6\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 486, mode: os.FileMode(420), modTime: time.Unix(1501636332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.js": appJs,
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.js": &bintree{appJs, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

